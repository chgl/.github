name: Standard workflow for building a container image from a Dockerfile

permissions:
  contents: read

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      image:
        description: "Name of the image to build and push, including its registry but excluding any tags"
        required: false
        default: "ghcr.io/${{ github.repository }}"
        type: string
      build-context:
        description: "The directory containing the Containerfile used to build the image"
        required: false
        default: "."
        type: string
      enable-upload-image:
        description: "If enabled, upload the image as a build artifact"
        required: false
        default: true
        type: boolean
      enable-build-test-layer:
        description: "If enabled, builds a layer called `test` inside the Dockerfile. Useful for unit testing."
        required: false
        default: false
        type: boolean
      enable-upload-test-image:
        description: "If enabled, uploads the image built from the test layer as an artifact."
        required: false
        default: false
        type: boolean
      enable-trivy-scan:
        description: "If enabled, scan the image using trivy and publish a signed attestation"
        required: false
        default: true
        type: boolean
      trivy-ignore-unfixed:
        description: "Ignore unfixed/unfixable vulnerabilities in reports"
        required: false
        default: true
        type: boolean
      image-tags:
        description: "If set, overwrite the default image tags. See <https://github.com/docker/metadata-action?tab=readme-ov-file#tags-input> for the format and usage."
        required: false
        default: ""
        type: string
      platforms:
        description: "List of target platforms for build"
        required: false
        type: string
        default: |
          linux/amd64
    outputs:
      image-tags:
        value: ${{ jobs.build.outputs.image-tags }}
        description: "The built image tags"
      image-version:
        value: ${{ jobs.build.outputs.image-version }}
        description: "The built image version"
      image-meta-json:
        value: ${{ jobs.build.outputs.image-meta-json }}
        description: "The built image meta data in JSON format"
      image-digest:
        value: ${{ jobs.build.outputs.image-digest }}
        description: "The built image digest"
      test-image-tags:
        value: ${{ jobs.build.outputs.test-image-tags }}
        description: "The test image tags"
      test-image-meta-json:
        value: ${{ jobs.build.outputs.test-image-meta-json }}
        description: "The test image meta data in JSON format"
      test-image-digest:
        value: ${{ jobs.build.outputs.test-image-digest }}
        description: "The test image digest"
      test-image-version:
        value: ${{ jobs.build.outputs.test-image-version }}
        description: "The built image version"
      image-slug:
        value: ${{ jobs.build.outputs.image-slug }}
        description: "The name of the build image in slugified form. This is the name of the artifact where the image was uploaded to."
    secrets:
      github-token:
        description: "The GitHub workflow token used to push to ghcr.io. Also used by MegaLinter"
        required: true

jobs:
  build:
    name: build image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      # for uploading trivy scan results to security tab
      security-events: write
      # for the trivy PR comment
      pull-requests: write
    outputs:
      image-version: ${{ steps.image_meta.outputs.version }}
      image-tags: ${{ steps.image_meta.outputs.tags }}
      image-meta-json: ${{ steps.image_meta.outputs.json }}
      image-digest: ${{ steps.build.outputs.digest }}
      test-image-version: ${{ steps.tests_image_meta.outputs.version }}
      test-image-tags: ${{ steps.tests_image_meta.outputs.tags }}
      test-image-meta-json: ${{ steps.tests_image_meta.outputs.json }}
      test-image-digest: ${{ steps.build_test.outputs.digest }}
      image-slug: ${{ steps.slugify-image.outputs.slug }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # <https://docs.docker.com/storage/containerd/>
      # via <https://github.com/docker/setup-buildx-action/issues/257>
      - name: Set up containerd image store
        shell: bash
        run: |
          jq '. | .+{"features": {"containerd-snapshotter": true}}' /etc/docker/daemon.json > /tmp/docker-daemon-with-containerd.json
          sudo mv /tmp/docker-daemon-with-containerd.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker

          docker info -f '{{ .DriverStatus }}'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3.4.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3.1.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Container image meta
        id: image_meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        with:
          images: |
            ${{ inputs.image }}
          tags: |
            ${{ inputs.image-tags }}

      - name: Container meta for the test image
        id: tests_image_meta
        if: ${{ inputs.enable-build-test-layer == true }}
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ inputs.image }}-test

      # ran first to avoid pushing failing images when running on master.
      - name: Build unit test image layer
        if: ${{ inputs.enable-build-test-layer == true }}
        id: build_test
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        with:
          context: ${{ inputs.build-context }}
          push: false
          load: true
          outputs: type=oci,dest=./image-test.tar
          tags: ${{ steps.tests_image_meta.outputs.tags }}
          labels: ${{ steps.tests_image_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: test
          platforms: ${{ inputs.platforms }}

      - uses: rlespinasse/slugify-value@a4879db1eb3db9bbee01dca36f98a8236c2b8239 # v1.4.0
        id: slugify-image
        with:
          key: BUILD_IMAGE
          value: ${{ steps.image_meta.outputs.json && fromJson(steps.image_meta.outputs.json).tags[0] }}
          publish-env: false
          slug-maxlength: nolimit

      - name: Upload test image
        if: ${{ (inputs.enable-build-test-layer == true) && (inputs.enable-upload-test-image == true) }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ steps.slugify-image.outputs.slug }}-test
          path: |
            ${{ github.workspace }}/image-test.tar

      - name: Build and push image
        id: build
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        with:
          context: ${{ inputs.build-context }}
          # when in a PR, save the image as a tar archive
          # this way, we can save it as an artifact in later steps
          # otherwise (on branch-push or releases), push the image to
          # the registry
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          outputs: type=oci,dest=./image.tar
          sbom: ${{ github.event_name != 'pull_request' }}
          provenance: ${{ github.event_name != 'pull_request' && 'mode=max' || false }}
          tags: ${{ steps.image_meta.outputs.tags }}
          labels: ${{ steps.image_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ inputs.platforms }}

      - name: Upload container image
        if: ${{ github.event_name == 'pull_request' && inputs.enable-upload-image == true }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ steps.slugify-image.outputs.slug }}
          path: |
            ${{ github.workspace }}/image.tar

      - name: display images
        run: |
          ls -lsa ${{ github.workspace }}
          docker image ls -a

      - name: install trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.53.0_Linux-64bit.deb

      - name: Create Trivy vulnerability attestation
        if: ${{ inputs.enable-trivy-scan }}
        run: |
          trivy image \
            --exit-code=0 \
            --format=cosign-vuln \
            --output=trivy-vuln-attestation.json \
            --ignore-unfixed="${{ inputs.trivy-ignore-unfixed }}" \
            "${{ fromJson(steps.image_meta.outputs.json).tags[0] }}"

      - name: Upload image vulnerability attestation
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: ${{ inputs.enable-trivy-scan }}
        with:
          name: ${{ steps.slugify-image.outputs.slug }}-trivy-attestation
          path: |
            trivy-vuln-attestation.json

      - name: Download PR comment template
        if: ${{ inputs.enable-trivy-scan }}
        run: |
          curl -o trivy-pr-report.md.tpl https://raw.githubusercontent.com/miracum/.github/master/.github/trivy-pr-report.md.tpl

      - name: Run Trivy vulnerability scanner for PR comment
        if: ${{ github.event_name == 'pull_request' && inputs.enable-trivy-scan }}
        run: |
          trivy image \
            --exit-code=0 \
            --format=template \
            --output=trivy-pr-report.md \
            --template="@trivy-pr-report.md.tpl" \
            --ignore-unfixed="${{ inputs.trivy-ignore-unfixed }}" \
            "${{ fromJson(steps.image_meta.outputs.json).tags[0] }}"

      - name: Add trivy report PR comment
        uses: marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31 # v2.9.0
        # when running from a fork, the CI token doesn't have enough permissions to create PR comments
        if: ${{ github.event_name == 'pull_request' && inputs.enable-trivy-scan && !github.event.pull_request.head.repo.fork }}
        with:
          recreate: true
          header: "trivy-report-comment-${{ steps.slugify-image.outputs.slug }}"
          path: trivy-pr-report.md

    # requires content: write access
    #   - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
    #     uses: aquasecurity/trivy-action@fbd16365eb88e12433951383f5e99bd901fc618f # 0.12.0
    #     if: ${{ github.event_name != 'pull_request' }}
    #     with:
    #       image-ref: ${{ fromJson(steps.image_meta.outputs.json).tags[0] }}
    #       format: "github"
    #       output: "dependency-results.sbom.json"
    #       github-pat: ${{ secrets.github-token }}

  image-provenance:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
      - build
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ inputs.image }}
      digest: ${{ needs.build.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.github-token }}

  sign-image:
    name: sign image
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Sign image
        env:
          IMAGE: "${{ inputs.image }}@${{ needs.build.outputs.image-digest }}"
        run: |
          echo "Signing '$IMAGE' using keyless approach"
          cosign sign --yes "${IMAGE}"

  attest-trivy-vulnerability-report:
    name: attest trivy vulnerability report
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' && inputs.enable-trivy-scan }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Download attestations
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.build.outputs.image-slug }}-trivy-attestation
          path: /tmp

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Attest image vulnerability report
        env:
          IMAGE: "${{ inputs.image }}@${{ needs.build.outputs.image-digest }}"
        run: |
          echo "Attest vulnerability report for '$IMAGE' using keyless approach"
          cosign attest --yes --type vuln --predicate /tmp/trivy-vuln-attestation.json "$IMAGE"
