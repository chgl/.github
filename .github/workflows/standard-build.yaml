name: Standard workflow for building a container image from a Dockerfile

permissions:
  contents: read

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      image:
        description: "Name of the image to build and push, including its registry but excluding any tags"
        required: false
        default: "ghcr.io/${{ github.repository }}"
        type: string
      enable-build-test-layer:
        description: "If enabled, builds a layer called `test` inside the Dockerfile. Useful for unit testing."
        required: false
        default: false
        type: boolean
      enable-upload-test-image:
        description: "If enabled, uploads the image built from the test layer as an artifact."
        required: false
        default: false
        type: boolean
    outputs:
      image-tags:
        value: ${{ jobs.build.outputs.image-tags }}
        description: "The built image tags"
      image-meta-json:
        value: ${{ jobs.build.outputs.image-meta-json }}
        description: "The built image meta data in JSON format"
      image-digest:
        value: ${{ jobs.build.outputs.image-digest }}
        description: "The built image digest"
      image-slug:
        value: ${{ jobs.build.outputs.image-slug }}
        description: "The name of the build image in slugified form. This is the name of the artifact where the image was uploaded to."
    secrets:
      github-token:
        description: "The GitHub workflow token used to push to ghcr.io. Also used by MegaLinter"
        required: true

jobs:
  build:
    name: build image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-tags: ${{ steps.image_meta.outputs.tags }}
      image-meta-json: ${{ steps.image_meta.outputs.json }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-slug: ${{ steps.slugify-image.outputs.slug }}
    steps:
      - name: Checkout
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          # via <https://stackoverflow.com/questions/74744498/github-pushing-to-protected-branches-with-fine-grained-token/76550826#76550826>
          persist-credentials: false

      - name: Container image meta
        id: image_meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        with:
          images: |
            ${{ inputs.image }}

      - name: Container meta for the test image
        id: tests_image_meta
        if: ${{ inputs.enable-build-test-layer == true }}
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        with:
          images: |
            ${{ inputs.image }}-test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      # ran first to avoid pushing failing images when running on master.
      - name: Build unit test image layer
        if: ${{ inputs.enable-build-test-layer == true }}
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5
        with:
          push: false
          load: true
          tags: ${{ steps.tests_image_meta.outputs.tags }}
          labels: ${{ steps.tests_image_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: test

      - name: Save test image as tar archive
        if: ${{ (inputs.enable-build-test-layer == true) && (inputs.enable-upload-test-image == true) }}
        env:
          IMAGE: ${{ steps.tests_image_meta.outputs.json && fromJson(steps.tests_image_meta.outputs.json).tags[0] }}
        run: |
          docker save "$IMAGE" -o /tmp/image-test.tar

      - uses: rlespinasse/slugify-value@a4879db1eb3db9bbee01dca36f98a8236c2b8239 # v1.4.0
        id: slugify-image
        with:
          key: BUILD_IMAGE
          value: ${{ steps.image_meta.outputs.json && fromJson(steps.image_meta.outputs.json).tags[0] }}
          publish-env: false
          slug-maxlength: nolimit

      - name: Upload test image
        if: ${{ (inputs.enable-build-test-layer == true) && (inputs.enable-upload-test-image == true) }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ steps.slugify-image.outputs.slug }}-test
          path: |
            /tmp/image-test.tar

      - name: Build and push image
        id: build
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5
        with:
          # when in a PR, load the image into the local docker daemon
          # this way, we can save it as an artifact in later steps
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image_meta.outputs.tags }}
          labels: ${{ steps.image_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save container image as tar archive
        if: ${{ github.event_name == 'pull_request' }}
        env:
          IMAGE: ${{ fromJson(steps.image_meta.outputs.json).tags[0] }}
        run: |
          docker save "$IMAGE" -o /tmp/image.tar

      - name: Upload container image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ steps.slugify-image.outputs.slug }}
          path: |
            /tmp/image.tar

      - name: Save Trivy vulnerability attestation
        uses: aquasecurity/trivy-action@b2933f565dbc598b29947660e66259e3c7bc8561 # 0.20.0
        with:
          image-ref: ${{ fromJson(steps.image_meta.outputs.json).tags[0] }}
          exit-code: "0"
          format: cosign-vuln
          output: trivy-vuln-attestation.json

      - name: Run Trivy vulnerability scanner for GitHub Security tab
        uses: aquasecurity/trivy-action@b2933f565dbc598b29947660e66259e3c7bc8561 # 0.20.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          image-ref: ${{ fromJson(steps.image_meta.outputs.json).tags[0] }}
          exit-code: "0"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@ccf74c947955fd1cf117aef6a0e4e66191ef6f61 # v3.25.4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@b2933f565dbc598b29947660e66259e3c7bc8561 # 0.20.0
        if: ${{ github.event_name != 'pull_request' }}
        with:
          image-ref: ${{ fromJson(steps.image_meta.outputs.json).tags[0] }}
          format: "github"
          output: "dependency-results.sbom.json"
          github-pat: ${{ secrets.github-token }}

      - name: Upload image vulnerability attestation
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ steps.slugify-image.outputs.slug }}-trivy-attestation
          path: |
            trivy-vuln-attestation.json

  image-provenance:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
      - build
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ inputs.image }}
      digest: ${{ needs.build.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.github-token }}

  sign-image:
    name: sign image
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github-token }}

      - name: Download attestations
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: ${{ needs.build.outputs.image-slug }}-trivy-attestation
          path: /tmp

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      # via <https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml>
      - name: Sign image
        env:
          # <https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable>
          TAGS: ${{ needs.build.outputs.image-tags }}
          DIGEST: ${{ needs.build.outputs.image-digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@"${DIGEST}"

      - name: Attest image vulnerability report
        env:
          IMAGE: "${{ inputs.image }}@${{ needs.build.outputs.image-digest }}"
        run: |
          echo "Attest vulnerability report for '$IMAGE' using keyless approach"
          cosign attest --yes --type vuln --predicate /tmp/trivy-vuln-attestation.json "$IMAGE"
